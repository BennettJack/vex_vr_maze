{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom queue import PriorityQueue\nfrom collections import deque\nimport heapq\nfrom vexcode_vr import *\n\n# Brain should be defined by default\nbrain=Brain()\n\ndrivetrain = Drivetrain(\"drivetrain\", 0)\npen = Pen(\"pen\", 8)\npen.set_pen_width(THIN)\nleft_bumper = Bumper(\"leftBumper\", 2)\nright_bumper = Bumper(\"rightBumper\", 3)\nfront_eye = EyeSensor(\"frontEye\", 4)\ndown_eye = EyeSensor(\"downEye\", 5)\nfront_distance = Distance(\"frontdistance\", 6)\ndistance = front_distance\nmagnet = Electromagnet(\"magnet\", 7)\nlocation = Location(\"location\", 9)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode VR Python Project\n# \n# ------------------------------------------\n\n# Add project code in \"main\"\ndef main():\n    drivetrain.set_turn_velocity(100, PERCENT)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    w , h = 8, 8\n    global maze\n    global startX, startY\n    global endX, endY\n    global route\n    global currentCell\n    global graph\n    global cellsToVisit\n    # Set start and end locations\n    startX, startY = 7,4\n    endX, endY = 0,3\n    # Instantiate maze\n    brain.clear()\n    route = []\n    maze = []\n\n    # Map the maze out in a 2D array, and add a new cell in each index\n    for i in range(w):\n        column = [] \n        for j in range(h):\n            column.append(Cell(i, j))\n        maze.append(column)\n\n    # Instantiate graph representation of the maze\n    graph = Graph()\n   \n\n    currentCell = maze[startX][startY]\n    currentCell.gScore = 0\n    currentCell.fScore = currentCell.gScore + currentCell.hScore\n    cellsToVisit = []\n    cellsToVisit.append(currentCell)\n    \n    # Pen down to mark path\n    # Moves 10mm forward so robot is in middle of cell\n    pen.move(DOWN)\n    drivetrain.drive_for(FORWARD,10,MM)\n\n    # Scans the first cell\n    scan_cell()\n\n    # A Star is used to find the exit first\n    a_star(maze)\n\n    # Once A Star has found the exit, discover all other cells in the maze\n    fill_maze(maze, graph)    \n    \n    # Return to start from current location\n    pathToStart = breadth_first_search(graph, currentCell, maze[startX][startY])  \n    for cell in pathToStart:\n        visitCell(cell)  \n\n    # Finds path to end and marks it with green\n    pathToEnd = breadth_first_search(graph, currentCell, maze[endX][endY])\n    print_fastest_path(pathToEnd)  \n    pen.set_pen_color(GREEN)\n    for cell in pathToEnd:\n       \n        cell.partOfFastestRoute = True\n        visitCell(cell) \n    print_maze()\n    # Orientates robot to leave the maze\n    foundExit = False\n    while foundExit == False:\n        if (front_distance.get_distance(MM) > 2999):\n            drivetrain.drive_for(FORWARD, 250, MM)\n            foundExit = True\n        else:\n            drivetrain.turn_for(RIGHT,90,DEGREES)\n\n    \n        \ndef print_fastest_path(path):\n    brain.new_line()\n    brain.print(\"Fastest path step count: \" + str(len(path)))  \n    for cell in path:\n        brain.new_line()\n        cell.print_coords()\n        brain.print(\" --> \")\n       \n\n\n# A function which takes a cell object and allows the robot to face and move to it\ndef visitCell(neighbour):\n    global currentCell\n    global cellsToVisit\n    if(neighbour.xCoordinates < currentCell.xCoordinates):\n        drivetrain.turn_to_heading(0,DEGREES)\n        drivetrain.drive_for(FORWARD,250, MM)\n\n\n    elif(neighbour.yCoordinates > currentCell.yCoordinates):\n        drivetrain.turn_to_heading(90, DEGREES)\n        drivetrain.drive_for(FORWARD,250, MM)\n\n    elif(neighbour.xCoordinates > currentCell.xCoordinates):\n        drivetrain.turn_to_heading(180, DEGREES)\n        drivetrain.drive_for(FORWARD,250, MM)\n\n\n    elif(neighbour.yCoordinates < currentCell.yCoordinates):\n        drivetrain.turn_to_heading(270, DEGREES)\n        drivetrain.drive_for(FORWARD,250, MM)\n    \n    currentCell = maze[neighbour.xCoordinates][neighbour.yCoordinates]\n\n    # if this cell hasn't been scanned yet, scan it\n    if(currentCell.scanned is False): \n        scan_cell()\n   \n\n\ndef debug_move():\n    drivetrain.drive_for(FORWARD, 1, MM)\n    drivetrain.drive_for(REVERSE, 1, MM)\n\n\ndef a_star(maze):\n    global currentCell\n    global graph\n    path = []\n    priorityQueue = []\n    previousCell = currentCell\n    count = 0\n    \n    if count == 0:\n        path.append(currentCell)\n    while True:\n        #this is to try and fix prio q\n        for neighbour in graph.graph[currentCell]:\n            count += 1\n            temp_g_score = currentCell.gScore + 1\n            temp_f_score = temp_g_score + neighbour.hScore\n            if temp_f_score < neighbour.fScore:\n                neighbour.gScore = temp_g_score\n                neighbour.fScore = temp_f_score\n                heapq.heappush(priorityQueue,(  neighbour.hScore, neighbour.fScore, count, neighbour,neighbour.gScore) )\n\n\n        \n        cellToVisit = heapq.heappop(priorityQueue)[3]\n        brain.print(cellToVisit.wallCount)\n\n\n        # Slight optimisation to prevent robot from going to a cell which is known to be a dead end based on number of walls that\n        # surrounds it\n        isDeadEnd = True\n\n        while isDeadEnd:\n            if cellToVisit.wallCount < 3:\n               \n                isDeadEnd = False\n            else:\n                brain.print(\"is dead end\")\n                cellToVisit = heapq.heappop(priorityQueue)[3]\n\n\n\n        if cellToVisit in graph.graph[cellToVisit]:\n            visitCell(cellToVisit)\n            path.append(cellToVisit)\n        else:\n            pathToFollow = breadth_first_search(graph, currentCell, cellToVisit)\n            for cell in pathToFollow:\n                visitCell(cell)\n\n\n        if down_eye.detect(RED):\n            break\n\ndef fill_maze(maze, graph):\n    \n    while len(cellsToVisit) > 0:\n        paths = []\n        for cell in cellsToVisit:\n            path = breadth_first_search(graph, currentCell, cell)\n            paths.append(path)\n\n        closestPath = paths[0]\n        for path in paths:\n            if(len(path) < len(closestPath)):\n                closestPath = path\n                \n        for cell in closestPath:\n            visitCell(cell)\n\n\n\n#A class representing each cell\nclass Cell:\n    def __init__(self, w, h):\n        self.xCoordinates, self.yCoordinates = w, h\n        #up, right, down, left\n        self.walls = [False, False, False, False]\n        self.sideScanned = [False, False, False, False]\n        self.wallCount = 0\n        self.discovered = False\n        self.scanned = False\n        self.hScore = abs(self.xCoordinates - endX) + abs(self.yCoordinates - endY)\n        self.gScore = float('inf')\n        self.fScore = self.gScore + self.hScore\n        self.partOfFastestRoute = False\n\n        if(self.xCoordinates == 0) and (self.yCoordinates != 3):\n            self.walls[0] = True\n        if(self.xCoordinates == 7) and (self.yCoordinates != 4):\n            self.walls[2] = True\n        if(self.yCoordinates == 0):\n            self.walls[3] = True\n        if(self.yCoordinates == 7):\n            self.walls[1] = True\n\n    def print_coords(self):\n        brain.print(\"(X: \")\n        brain.print(self.xCoordinates)\n        brain.print(\" , Y: \")\n        brain.print(self.yCoordinates)\n        brain.print(\")\")\n    \n    def calculate_walls(self):\n        tempWallCount = 0\n        for wall in self.walls:\n            if wall is True:\n                tempWallCount += 1\n        \n        self.wallCount = tempWallCount\n        \n\n\n# A function which scans all four sides of a cell to discover walls and neighbours\ndef scan_cell():\n    global currentCell\n    global graph\n    global cellsToVisit\n\n    \n    # Ensures program doesn't go out of bounds of the maze array\n    if (currentCell.xCoordinates - 1) == -1:\n        currentCell.walls[0] = True\n        currentCell.sideScanned[0] = True\n\n    elif currentCell.sideScanned[0] is False:\n        cellAbove = maze[currentCell.xCoordinates -1][currentCell.yCoordinates]\n        drivetrain.turn_to_heading(0,DEGREES)\n        if(front_distance.get_distance(MM) > 70):\n            if cellAbove.scanned is False:\n                graph.add_edge(currentCell, cellAbove)\n                graph.add_edge(cellAbove, currentCell)\n                cellAbove.discovered = True\n                cellAbove.sideScanned[2] = True\n                if cellAbove not in cellsToVisit:\n                    cellsToVisit.append(cellAbove)\n        else:\n            currentCell.walls[0] = True\n            currentCell.sideScanned[0] = True\n            cellAbove.walls[2] = True\n            cellAbove.sideScanned[2] = True\n            cellAbove.calculate_walls()\n\n    if(currentCell.yCoordinates +1 ) == 8:\n        currentCell.walls[1] = True\n        currentCell.sideScanned[1] = True\n        pass\n    elif currentCell.sideScanned[1] is False:\n        cellToRight = maze[currentCell.xCoordinates][currentCell.yCoordinates +1]\n        drivetrain.turn_to_heading(90,DEGREES)\n        if(front_distance.get_distance(MM) > 70):\n            if cellToRight.scanned is False:\n                graph.add_edge(currentCell, cellToRight)\n                graph.add_edge(cellToRight, currentCell)\n                cellToRight.discovered = True\n                cellToRight.sideScanned[3] = True\n                if cellToRight not in cellsToVisit:\n                    cellsToVisit.append(cellToRight)\n        \n        \n        else:        \n            currentCell.walls[1] = True\n            currentCell.sideScanned[1] = True\n            cellToRight.walls[3] = True\n            cellToRight.sideScanned[3] = True\n            cellToRight.calculate_walls()\n\n\n\n\n    if (currentCell.xCoordinates + 1) == 8:\n        currentCell.walls[2] = True\n        currentCell.sideScanned[2] = True\n        pass\n    elif currentCell.sideScanned[2] is False:     \n        drivetrain.turn_to_heading(180,DEGREES)\n        cellBelow = maze[currentCell.xCoordinates +1][currentCell.yCoordinates]\n        if(front_distance.get_distance(MM) > 70):\n            if cellBelow.scanned is False:\n                graph.add_edge(currentCell, cellBelow)\n                graph.add_edge(cellBelow, currentCell)\n                cellBelow.discovered = True\n                cellBelow.sideScanned[0] = True\n                if cellBelow not in cellsToVisit:\n                    cellsToVisit.append(cellBelow)\n    \n        else:   \n            currentCell.walls[2] = True\n            currentCell.sideScanned[2] = True\n            cellBelow.walls[0] = True\n            cellBelow.sideScanned[0] = True\n            cellBelow.calculate_walls()\n\n\n    if(currentCell.yCoordinates -1 ) == -1:\n        currentCell.walls[3] = True\n        currentCell.sideScanned[3] = True\n        pass\n    elif currentCell.sideScanned[3] is False:\n        drivetrain.turn_to_heading(270,DEGREES)\n        cellToLeft = maze[currentCell.xCoordinates ][currentCell.yCoordinates-1]\n        if(front_distance.get_distance(MM) > 70):\n            if cellToLeft.scanned is False:\n                graph.add_edge(currentCell, cellToLeft)\n                graph.add_edge(cellToLeft, currentCell)\n                cellToLeft.discovered = True\n                cellToLeft.sideScanned[1] = True\n                if cellToLeft not in cellsToVisit:\n                    cellsToVisit.append(cellToLeft)\n            \n        else:\n\n            currentCell.walls[3] = True\n            currentCell.sideScanned[3] = True\n            cellToLeft.walls[1] = True\n            cellToLeft.sideScanned[1] = True\n            cellToLeft.calculate_walls()\n            \n\n\n\n\n\n\n\n\n\n\n\n    currentCell.scanned = True\n    cellsToVisit.remove(currentCell)\n\n    print_maze()\n\n\n\n\nclass Graph:\n    def __init__(self, graph: dict = {}):\n        self.graph = graph\n\n\n    def add_edge(self, cell1, cell2):\n        if cell1 not in self.graph:\n            self.graph[cell1]= []\n        \n        self.graph[cell1].append(cell2)\n\n\n\n\n\ndef breadth_first_search(graph, startCell, targetCell):\n    \n    visited = {}\n    queue = deque()\n\n    visited[startCell] = None\n    queue.append(startCell)\n\n    while queue:\n        cell = queue.popleft()\n\n        if cell == targetCell:\n            path = []\n            \n            while cell:\n                path.append(cell)\n                cell = visited[cell]\n\n            return path[::-1]\n\n        for neighbour in graph.graph[cell]:\n            if neighbour not in visited:\n                visited[neighbour] = cell\n                queue.append(neighbour)\n                \n\ndef print_maze():\n    global currentCell\n    brain.clear()\n    currentCellRow = 0\n    currentCellColumn = 0\n    for row in maze:\n        print_divider(row, currentCellRow)\n        currentCellRow += 1\n        print_barrier(row, currentCellColumn)\n        currentCellColumn += 1\n        wait(0.1,MSEC)\n\n    endRow = maze[0]\n    print_divider(endRow, currentCellRow)\n   \n\ndef print_divider(row, currentCellRow):\n    brain.new_line()\n    firstCellInRow = True\n    if((currentCellRow == 0) or (currentCellRow == 8)):\n        for cell in row:\n            if(firstCellInRow):\n                brain.print(\"+----+\")\n                firstCellInRow = False\n            else:\n                brain.print(\"----+\")\n    else:\n        for cell in row:\n            if(firstCellInRow):\n                if(cell.walls[0] == False):\n                    brain.print(\"+    +\")\n                else:\n                    brain.print(\"+----+\")\n                firstCellInRow = False\n\n\n            else:\n                if(cell.walls[0] == False):\n                    brain.print(\"    +\")\n                else:\n                    brain.print(\"----+\")\n    \n\n\n\ndef print_barrier(row, currentCellColumn):\n    global currentCell\n    firstCellInRow = True\n    rowsPrinted = 0\n    while(rowsPrinted < 2):\n        brain.new_line()\n        for cell in row:\n            if(firstCellInRow):\n                if(cell.walls[1] == True):\n                    if(rowsPrinted == 0):\n                        brain.print(\"|    |\")\n                    if(rowsPrinted == 1):\n                        if cell.partOfFastestRoute:\n                            brain.print(\"|  x |\")\n                        else:\n                            brain.print(\"|    |\")\n                else:\n                    if(rowsPrinted == 0):\n                        brain.print(\"|     \")\n                    if(rowsPrinted == 1):\n                        if cell.partOfFastestRoute:\n                            brain.print(\"|  x  \") \n                        else:\n                            brain.print(\"|     \") \n                firstCellInRow = False\n            elif(cell.walls[1] == True):\n                if(rowsPrinted == 0):\n                    brain.print(\"    |\")\n                if(rowsPrinted == 1):\n                    if cell.partOfFastestRoute:\n                        brain.print(\"  x |\")\n                    else:\n                        brain.print(\"    |\")\n\n            else:\n                if(rowsPrinted == 0):\n                    brain.print(\"     \")\n                if(rowsPrinted == 1):\n                    if cell.partOfFastestRoute:\n                        brain.print(\"  x  \") \n                    else:\n                       brain.print(\"     \") \n            \n            #wait(1,MSEC)\n        rowsPrinted += 1\n        firstCellInRow = True\n# VR threads — Do not delete\nvr_thread(main)","textLanguage":"python","robotConfig":[],"slot":0,"platform":"PG","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false,"playground":"DynamicWallMaze","robotModel":"vr"}